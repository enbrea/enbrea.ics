pool:
  vmImage: 'windows-2022'

variables:
- group: 'code-sign-config'
- group: 'nuget-package-config'
- group: 'github-config'

steps:
- checkout: self
  persistCredentials: true
- task: DownloadSecureFile@1
  displayName: 'Download Client Authentication Certificate'
  name: SM_CLIENT_CERT_FILE
  inputs:
    secureFile: ClientCert.p12
- task: SSMClientToolsSetup@1
  displayName: 'Setup DigiCert Tools'
  inputs:
    APIKey: '$(SM_API_KEY)'
- task: PowerShell@2
  displayName: 'Prepare DigiCert Code Signing'
  inputs:
    targetType: 'inline'
    script: |
      $env:PATH += ';C:\Program Files\DigiCert\DigiCert Keylocker Tools'
      smctl credentials save $(SM_API_KEY) $(SM_CLIENT_CERT_PASSWORD)
      smksp_cert_sync.exe
    failOnStderr: true
    pwsh: true
- task: PowerShell@2
  displayName: 'Get Version Number'
  inputs:
    filePath: 'azure-gitversion.ps1'
    failOnStderr: true
- task: Assembly-Info-NetCore@2
  displayName: 'Apply Assembly Infos'
  inputs:
    Path: '$(Build.SourcesDirectory)'
    FileNames: '**/*.csproj'
    InsertAttributes: true
    FileEncoding: 'auto'
    WriteBOM: false
    VersionNumber: '$(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildId)'
    FileVersionNumber: '$(MajorVersion).$(MinorVersion).$(PatchVersion).$(Build.BuildId)'
    InformationalVersion: '$(SemVersion)'
    LogLevel: 'verbose'
    FailOnWarning: false
- task: DotNetCoreCLI@2
  displayName: 'Restore'
  inputs:
    command: 'restore'
    projects: '*.sln'
    feedsToUse: 'select'
    vstsFeed: 'b0890edd-bcca-4a1c-b63c-d22daf6e4407/24f47e68-5eca-4ba8-8ab3-905662347d75'
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    projects: '*.sln'
    arguments: '-c $(BuildConfiguration)'
- task: DotNetCoreCLI@2
  displayName: 'Test'
  inputs:
    command: 'test'
    projects: '*.sln'
    arguments: '-c $(BuildConfiguration)'
    testRunTitle: 'Perform unit tests'
- task: DotNetCoreCLI@2
  displayName: 'Pack'
  inputs:
    command: 'custom'
    projects: 'src/Enbrea.Ics.csproj'
    custom: 'pack'
    arguments: '/p:Configuration=$(BuildConfiguration) /p:PackageVersion=$(SemVersion) --no-build'
- task: NuGetCommand@2
  displayName: 'Sign'
  env:
    SM_CLIENT_CERT_FILE : $(SM_CLIENT_CERT_FILE.secureFilePath)
  inputs:
    command: 'custom'
    arguments: 'sign $(Build.Repository.LocalPath)/**/*.nupkg -Timestamper http://timestamp.digicert.com -CertificateFingerprint $(SM_CERT_FINGERPRINT) -HashAlgorithm SHA256 -Verbosity detailed -Overwrite'
- task: NuGetCommand@2
  displayName: 'Publish preview to internal feed'
  condition: and(succeeded(), ne(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.Repository.LocalPath)/**/*.nupkg;!$(Build.Repository.LocalPath)/**/*.symbols.nupkg'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'b0890edd-bcca-4a1c-b63c-d22daf6e4407/24f47e68-5eca-4ba8-8ab3-905662347d75'
- task: PowerShell@2
  displayName: 'Push to GitHub'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    targetType: 'inline'
    script: |
      git remote add github https://$(PAT)@github.com/enbrea/enbrea.ics.git
      git fetch github
      git checkout .
      git push github HEAD:main
      git push --tags github HEAD:main
    pwsh: true
- task: NuGetCommand@2
  displayName: 'Publish to nuget.org'
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  inputs:
    command: 'push'
    packagesToPush: '$(Build.Repository.LocalPath)/**/*.nupkg;!$(Build.Repository.LocalPath)/**/*.symbols.nupkg'
    nuGetFeedType: 'external'
    publishFeedCredentials: 'STUEBER SYSTEMS | nuget.org'
